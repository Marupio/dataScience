************************
* Data Science Project *
************************

LICENSE

All code is currently Copyright (C) 2017 David L. F. Gaden.  This may be subject to change with
additional contributors.

Includes a portion of MBED tls code under Apache 2.0 License.


DESCRIPTION

This is a No-Limit Texas Hold-em Poker analysis tool & game engine based in C++11.


INSTALLATION

* Install git
* Install postgres and create user dsuser with password 123 and access to database dsdata
* Install psqxx
* Clone this repository: git clone [repoAddress], where:
    [repoAddress] is the address provided by bitbucket, just under the word Overview
* This repository uses submodules, so execute:
    * git submodule init
    * git submodule update
* cd dataScience; mkdir build_opt; cd build_opt
* Check if your CPU supports: AVX, SSE4, or SSE2 instructions.
    * If it does, append -DUSE_XXX_INSTRUCTIONS=1 where XXX is AVX, SSE4 or SSE2
    * Only choose one of these, prefer the given order
* cmake .. -Dopt=ON [add -DUSE... option if applicable]
* make

How to get the code for the first time:

git clone https://Marupio@bitbucket.org/Marupio/datascience.git dataScience
cd dataScience
git submodule init
git submodule update


How to update the code at a later time:

git pull origin
git submodule update


How to compile optimized version:
(starting from dataScience directory)
rm -rf build_opt
mkdir build_opt
cd build_opt
cmake .. -Dopt=ON -DUSE_AVX_INSTRUCTIONS=1
make


How to compile debug version:
rm -rf build_debug
mkdir build_debug
cd build_debug
cmake .. -DUSE_AVX_INSTRUCTIONS=1
make



DEPENDENCIES

Requires postgres to be installed on user's machine
* currently hard-coded to user: dsuser, password 123, database dsdata
Designed to be platform independent
* platform-dependent functions are kept in osRelated files in core
* currently only POSIX has been implemented
* there is only one platform-dependent function currently in use


COMPONENTS - COMPLETED

* Multi-threading game engine
* Hand-ranking algorithm
    * Provides an exact rank given a set of hole cards and board
* Cryptographically secure pseudo random number generator (CSPRNG) and interface
* postgres interface for handling statistics and other generated data
* Dictionary, Entry, Token, Itstream classes for easy file input / output and settings management.
* Integration with dlib for analysis of simulation runs, and creation of useful look-up tables.


COMPONENTS - IN PROGRESS

* Extracting meta-data from all-call tables, and study of krr-classification algorithm


COMPONENTS - TODO

* Create detailed hand-rank tables
    * Input variables:
        * Number of players
        * Position
        * Players that have acted (fold, call, raise)
        * Player actions simulated using input variables:
            * Raise and call thresholds based on hole card strength (Chen), current bet level, and
                    position (with statistical variability applied to each player)
            * Bluff (or mistake) percentage
    * Output variables:
        * Win / lose
        * Hand rank at flop, turn and river
        * Hand rank predection and flop and turn
    * Create meta data of output variables (average, stddev, histogram)
    * Perform gradient descent on meta variables to find best win predictors
    This task will help make more sense of hand rank & prediction, and preflop hole cards

* Create player database framework

* Create interface with online game



